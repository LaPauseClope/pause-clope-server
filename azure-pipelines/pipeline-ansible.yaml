trigger: none  # Ce pipeline est déclenché automatiquement ou manuellement

pool:
  name: SelfHosted

variables:
  TF_ROOT: terraform
  JAR_NAME: pause-clope.jar
  APP_USER: adminuser

stages:
- stage: DeployApp
  displayName: 'Deploy Java App to Azure VM via Ansible'
  jobs:
  - job: Deploy
    displayName: 'Ansible Deployment'
    steps:
    - checkout: self

    # 1. Installer Ansible
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
    - script: pip install ansible
      displayName: 'Install Ansible'

    # 2. Init Terraform pour récupérer l’état distant
    - powershell: |
        terraform init `
          -backend-config="resource_group_name=$env:ARM_RESOURCE_GROUP_NAME" `
          -backend-config="storage_account_name=$env:ARM_STORAGE_ACCOUNT_NAME" `
          -backend-config="container_name=$env:ARM_CONTAINER_NAME" `
          -backend-config="key=terraform.tfstate" `
          -backend-config="access_key=$env:ARM_ACCESS_KEY"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init (to get remote state)'
      env:
        ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
        ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
        ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    # 3. Récupérer l'IP publique de la VM et créer inventory.ini
    - powershell: |
        $ip = terraform output -raw vm_public_ip
        Write-Host "##vso[task.setvariable variable=VM_PUBLIC_IP]$ip"
        echo "[backend]" > ansible/inventory.ini
        echo "$ip ansible_user=$(APP_USER) ansible_ssh_private_key_file=`"$HOME/.ssh/id_rsa`" ansible_python_interpreter=/usr/bin/python3" >> ansible/inventory.ini
      workingDirectory: $(TF_ROOT)
      displayName: 'Generate dynamic Ansible inventory'

    # 4. Copier le .jar depuis l'artifact Java (buildé par un autre pipeline)
    - download: current
      artifact: java-app
      displayName: 'Download Java artifact'
    
    - script: |
        mkdir -p target
        cp $(Pipeline.Workspace)/java-app/$(JAR_NAME) target/$(JAR_NAME)
      displayName: 'Copy .jar to target/ for Ansible'

    # 5. Lancer le playbook Ansible
    - script: |
        ansible-playbook -i $(TF_ROOT)/../ansible/inventory.ini ansible/deploy-backend.yml
      displayName: 'Run Ansible Playbook'
