trigger:
- devops

pool:
  name: SelfHosted

variables:
- group: LaPauseClope
- name: TF_ROOT
  value: 'terraform'
- name: ANSIBLE_PIPELINE_ID
  value: '13'

stages:
- stage: TerraformPlan
  displayName: 'Terraform Plan'
  jobs:
  - job: Plan
    displayName: 'Run Terraform Plan'
    steps:
    - checkout: self

    - powershell: terraform -version
      displayName: 'Check Terraform Version'

    - powershell: |
        terraform init -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" `
                      -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" `
                      -backend-config="container_name=$(ARM_CONTAINER_NAME)" `
                      -backend-config="key=terraform.tfstate" `
                      -backend-config="access_key=$(ARM_ACCESS_KEY)"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init'

    - powershell: |
        terraform plan -out=tfplan
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Plan'
      env:
        TF_VAR_admin_password: $(ARM_VM_PASSWORD)
        TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
        TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
        TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
        TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
        TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
        TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
        TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)

    - publish: $(TF_ROOT)/tfplan
      artifact: tfplan

- stage: TerraformApply
  displayName: 'Terraform Apply'
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
  - job: Apply
    displayName: 'Run Terraform Apply'
    steps:
    - checkout: self

    - download: current
      artifact: tfplan

    - powershell: |
        terraform init -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" `
                      -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" `
                      -backend-config="container_name=$(ARM_CONTAINER_NAME)" `
                      -backend-config="key=terraform.tfstate" `
                      -backend-config="access_key=$(ARM_ACCESS_KEY)"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init (Apply)'

    - powershell: terraform apply -auto-approve "$env:PIPELINE_WORKSPACE\tfplan\tfplan"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Apply'
      env:
        TF_VAR_admin_password: $(ARM_VM_PASSWORD)
        TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
        TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
        TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
        TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
        TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
        TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
        TF_VAR_tenant_id: $(ARM_TENANT_ID)


    - powershell: |
        terraform output -raw vm_public_ip > ip.txt
        terraform output -raw ssh_private_key > ssh_private_key.txt
      workingDirectory: $(TF_ROOT)
      displayName: 'Extract Terraform Outputs'

    - publish: $(TF_ROOT)/ip.txt
      artifact: terraform-output

    - publish: $(TF_ROOT)/ssh_private_key.txt
      artifact: terraform-ssh-key

- stage: ConfigureWithAnsible
  displayName: 'Configure with Ansible'
  dependsOn: TerraformApply
  condition: succeeded()
  jobs:
  - job: AnsibleConfigure
    displayName: 'Run Ansible Playbook'
    steps:
    - checkout: self

    - download: current
      artifact: terraform-output

    - download: current
      artifact: terraform-ssh-key

    - powershell: |
        $ip = Get-Content -Path "$(Pipeline.Workspace)\terraform-output\ip.txt"
        $sshKeyRaw = Get-Content -Path "$(Pipeline.Workspace)\terraform-ssh-key\ssh_private_key.txt" -Raw
        $localKeyPath = "$env:USERPROFILE\ansible_ssh_key"

        [System.IO.File]::WriteAllText($localKeyPath, $sshKeyRaw, [System.Text.Encoding]::ASCII)

        $wslKeyPath = "/root/ansible/ansible_ssh_key"
        $wslInventoryPath = "/root/ansible/inventory"

        wsl bash -c "mkdir -p /root/ansible"
        wsl bash -c "cp /mnt/c/Users/fabio/ansible_ssh_key $wslKeyPath"
        wsl bash -c "chmod 600 $wslKeyPath"

        $inventoryContent = "server ansible_host=$ip ansible_user=adminuser ansible_ssh_private_key_file=$wslKeyPath"
        Set-Content -Path "$(System.DefaultWorkingDirectory)\ansible_inventory" -Value $inventoryContent -Encoding ascii

        $windowsInventory = "$(System.DefaultWorkingDirectory)\ansible_inventory"
        $inventoryWSL = "/mnt/c" + $windowsInventory.Substring(2).Replace('\', '/')
        wsl bash -c "cp '$inventoryWSL' '$wslInventoryPath'"

        Write-Host "=== INVENTORY CONTENT ==="
        Get-Content -Path $windowsInventory | ForEach-Object { Write-Host $_ }
        Write-Host "========================="

        Write-Host "Installing Ansible Galaxy collections..."
        $requirementsPath = "$(System.DefaultWorkingDirectory)\requirements.yml"
        $requirementsWSL = "/mnt/c" + $requirementsPath.Substring(2).Replace('\', '/')
        wsl bash -c "ansible-galaxy collection install -r '$requirementsWSL'"

        Write-Host "Running ansible -m ping..."
        wsl bash -c "echo '=== /root/ansible/inventory (dans WSL) ===' && cat $wslInventoryPath && echo '========================================'"
        $pingOutput = wsl bash -c "ansible -i $wslInventoryPath server -m ping -u adminuser --private-key $wslKeyPath -vvvv"
        $pingOutput | ForEach-Object { Write-Host $_ }

        $playbookPath = "$(System.DefaultWorkingDirectory)\deploy.yml"
        $playbookWSL = "/mnt/c" + $playbookPath.Substring(2).Replace('\', '/')

        Write-Host "Running playbook..."
        $ansibleOutput = wsl bash -c "ansible-playbook -i $wslInventoryPath $playbookWSL --private-key $wslKeyPath -u adminuser -vvv"
        $ansibleOutput | ForEach-Object { Write-Host $_ }
      displayName: 'Prepare SSH Key, Install Galaxy Requirements, and Run Ansible'
      env:
        ANSIBLE_HOST_KEY_CHECKING: False
