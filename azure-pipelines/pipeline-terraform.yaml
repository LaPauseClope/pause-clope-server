# trigger:
# - devops

# pool:
#   name: SelfHosted

# variables:
# - group: LaPauseClope
# - name: TF_ROOT
#   value: 'terraform'

# stages:

# - stage: TerraformPlan
#   displayName: 'Terraform Plan'
#   jobs:
#   - job: Plan
#     displayName: 'Run Terraform Plan'
#     pool:
#       name: SelfHosted
#     steps:
#     - checkout: self

#     - powershell: |
#         terraform -version
#       displayName: 'Check Terraform Version'

#     - powershell: |
#         terraform init `
#           -backend-config="resource_group_name=$env:ARM_RESOURCE_GROUP_NAME" `
#           -backend-config="storage_account_name=$env:ARM_STORAGE_ACCOUNT_NAME" `
#           -backend-config="container_name=$env:ARM_CONTAINER_NAME" `
#           -backend-config="key=terraform.tfstate" `
#           -backend-config="access_key=$env:ARM_ACCESS_KEY"
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Terraform Init'
#       env:
#         ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
#         ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
#         ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
#         ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

#     - powershell: |
#         terraform plan -out=tfplan
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Terraform Plan'
#       env:
#         ARM_CLIENT_ID: $(ARM_AZURE_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_AZURE_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_AZURE_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_AZURE_TENANT_ID)

#         TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
#         TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
#         TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
#         TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
#         TF_VAR_admin_password: $(ARM_VM_PASSWORD)
#         TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
#         TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
#         TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
#         TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)

#     - publish: $(TF_ROOT)/tfplan
#       artifact: tfplan
#       displayName: 'Publish tfplan artifact'

# - stage: TerraformApply
#   displayName: 'Terraform Apply'
#   dependsOn: TerraformPlan
#   condition: succeeded()
#   jobs:
#   - job: Apply
#     displayName: 'Run Terraform Apply'
#     pool:
#       name: SelfHosted
#     steps:
#     - checkout: self

#     - download: current
#       artifact: tfplan
#       displayName: 'Download tfplan artifact'

#     - powershell: |
#         Get-ChildItem -Recurse $env:PIPELINE_WORKSPACE
#       displayName: 'Show downloaded artifact files'

#     - powershell: |
#         terraform init `
#           -backend-config="resource_group_name=$env:ARM_RESOURCE_GROUP_NAME" `
#           -backend-config="storage_account_name=$env:ARM_STORAGE_ACCOUNT_NAME" `
#           -backend-config="container_name=$env:ARM_CONTAINER_NAME" `
#           -backend-config="key=terraform.tfstate" `
#           -backend-config="access_key=$env:ARM_ACCESS_KEY"
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Terraform Init (Apply)'
#       env:
#         ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
#         ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
#         ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
#         ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

#     - powershell: |
#         terraform apply -auto-approve "$env:PIPELINE_WORKSPACE\tfplan\tfplan"
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Terraform Apply'
#       env:
#         PIPELINE_WORKSPACE: $(Pipeline.Workspace)

#         ARM_CLIENT_ID: $(ARM_AZURE_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_AZURE_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_AZURE_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_AZURE_TENANT_ID)

#         TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
#         TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
#         TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
#         TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
#         TF_VAR_admin_password: $(ARM_VM_PASSWORD)
#         TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
#         TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
#         TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
#         TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)

#     - powershell: |
#         Write-Host "Export de la clé SSH privée générée par Terraform..."

#         $privateKey = terraform output -raw ssh_private_key

#         $keyPath = "$(System.DefaultWorkingDirectory)\id_rsa"
#         $privateKey | Out-File -Encoding ascii -FilePath $keyPath -Force

#         Write-Host "Clé SSH écrite dans : $keyPath"
#         Write-Host "Pas de permissions modifiées (icacls désactivé)"
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Export SSH Private Key (sans icacls)'

trigger:
- devops

pool:
  name: SelfHosted

variables:
- group: LaPauseClope
- name: TF_ROOT
  value: 'terraform'
- name: ANSIBLE_ROOT
  value: ''  # Ajustez à 'ansible' si les fichiers Ansible sont dans un dossier ansible/
- name: ANSIBLE_PIPELINE_ID
  value: '13'

stages:

- stage: TerraformPlan
  displayName: 'Terraform Plan'
  jobs:
  - job: Plan
    displayName: 'Run Terraform Plan'
    pool:
      name: SelfHosted
    steps:
    - checkout: self

    - powershell: |
        terraform -version
      displayName: 'Check Terraform Version'

    - powershell: |
        terraform init -backend-config="resource_group_name=$env:ARM_RESOURCE_GROUP_NAME" -backend-config="storage_account_name=$env:ARM_STORAGE_ACCOUNT_NAME" -backend-config="container_name=$env:ARM_CONTAINER_NAME" -backend-config="key=terraform.tfstate" -backend-config="access_key=$env:ARM_ACCESS_KEY"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init'
      env:
        ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
        ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
        ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - powershell: |
        terraform plan -out=tfplan
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Plan'
      env:
        ARM_CLIENT_ID: $(ARM_AZURE_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_AZURE_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_AZURE_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_AZURE_TENANT_ID)
        TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
        TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
        TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
        TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
        TF_VAR_admin_password: $(ARM_VM_PASSWORD)
        TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
        TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
        TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)

    - publish: $(TF_ROOT)/tfplan
      artifact: tfplan
      displayName: 'Publish tfplan artifact'

- stage: TerraformApply
  displayName: 'Terraform Apply'
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
  - job: Apply
    displayName: 'Run Terraform Apply'
    pool:
      name: SelfHosted
    steps:
    - checkout: self

    - download: current
      artifact: tfplan
      displayName: 'Download tfplan artifact'

    - powershell: |
        Get-ChildItem -Recurse $env:PIPELINE_WORKSPACE
      displayName: 'Show downloaded artifact files'

    - powershell: |
        terraform init -backend-config="resource_group_name=$env:ARM_RESOURCE_GROUP_NAME" -backend-config="storage_account_name=$env:ARM_STORAGE_ACCOUNT_NAME" -backend-config="container_name=$env:ARM_CONTAINER_NAME" -backend-config="key=terraform.tfstate" -backend-config="access_key=$env:ARM_ACCESS_KEY"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init (Apply)'
      env:
        ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
        ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
        ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - powershell: |
        terraform apply -auto-approve "$env:PIPELINE_WORKSPACE\tfplan\tfplan"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Apply'
      env:
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)
        ARM_CLIENT_ID: $(ARM_AZURE_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_AZURE_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_AZURE_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_AZURE_TENANT_ID)
        TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
        TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
        TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
        TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
        TF_VAR_admin_password: $(ARM_VM_PASSWORD)
        TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
        TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
        TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)

    - powershell: |
        terraform output -raw vm_public_ip > ip.txt
      workingDirectory: $(TF_ROOT)
      displayName: 'Extract Terraform Output'

    - publish: $(TF_ROOT)/ip.txt
      artifact: terraform-output
      displayName: 'Publish Terraform Output'

- stage: ConfigureWithAnsible
  displayName: 'Configure with Ansible'
  dependsOn: TerraformApply
  condition: succeeded()
  jobs:
  - job: AnsibleConfigure
    displayName: 'Run Ansible Playbook'
    pool:
      name: SelfHosted
    steps:
    - checkout: self

    - powershell: |
        Get-ChildItem -Recurse "$(System.DefaultWorkingDirectory)"
      displayName: 'List files in working directory'

    - download: current
      artifact: terraform-output
      displayName: 'Download Terraform Output'

    - powershell: |
        $ip = Get-Content -Path "$(Pipeline.Workspace)\terraform-output\ip.txt"
        $inventoryPath = Join-Path -Path "$(System.DefaultWorkingDirectory)" -ChildPath "$(ANSIBLE_ROOT)\inventory"
        if (-not (Test-Path $inventoryPath)) {
          Write-Host "Inventory file not found, creating it with default content."
          Set-Content -Path $inventoryPath -Value "server ansible_host=$ip ansible_user=adminuser ansible_ssh_private_key_file=ansible_ssh_key"
        } else {
          (Get-Content -Path $inventoryPath) -replace "ansible_host=.*", "ansible_host=$ip" | Set-Content -Path $inventoryPath
          Write-Host "Inventory updated with IP: $ip"
        }
      displayName: 'Update Ansible Inventory with Terraform Output'

    - powershell: |
        # Vérifier si Python est installé, sinon l'installer
        if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
          Write-Host "Installing Python..."
          Invoke-WebRequest -Uri https://www.python.org/ftp/python/3.11.6/python-3.11.6-amd64.exe -OutFile python-installer.exe
          Start-Process -Wait -FilePath python-installer.exe -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1"
          Remove-Item python-installer.exe
        }
        # Rafraîchir le PATH
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
        # Installer pip si nécessaire
        python -m ensurepip --upgrade
        python -m pip install --upgrade pip
        # Installer Ansible et pywinrm
        pip install ansible
        pip install pywinrm
      displayName: 'Install Python, Ansible, and pywinrm'

    - powershell: |
        echo $env:SSH_PRIVATE_KEY | Out-File -FilePath "$(System.DefaultWorkingDirectory)\ansible_ssh_key"
        icacls "$(System.DefaultWorkingDirectory)\ansible_ssh_key" /inheritance:r
        icacls "$(System.DefaultWorkingDirectory)\ansible_ssh_key" /grant:r "$env:USERNAME:F"
        ansible-playbook -i "$(System.DefaultWorkingDirectory)\$(ANSIBLE_ROOT)\inventory" "$(System.DefaultWorkingDirectory)\$(ANSIBLE_ROOT)\deploy.yml" --private-key "$(System.DefaultWorkingDirectory)\ansible_ssh_key"
      displayName: 'Run Ansible Playbook'
      env:
        SSH_PRIVATE_KEY: $(SSH_PRIVATE_KEY)
        ANSIBLE_HOST_KEY_CHECKING: False