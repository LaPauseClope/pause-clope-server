# trigger:
# - devops

# pool:
#   name: SelfHosted

# variables:
# - group: LaPauseClope
# - name: TF_ROOT
#   value: 'terraform'

# stages:

# - stage: TerraformPlan
#   displayName: 'Terraform Plan'
#   jobs:
#   - job: Plan
#     displayName: 'Run Terraform Plan'
#     pool:
#       name: SelfHosted
#     steps:
#     - checkout: self

#     - powershell: |
#         terraform -version
#       displayName: 'Check Terraform Version'

#     - powershell: |
#         terraform init `
#           -backend-config="resource_group_name=$env:ARM_RESOURCE_GROUP_NAME" `
#           -backend-config="storage_account_name=$env:ARM_STORAGE_ACCOUNT_NAME" `
#           -backend-config="container_name=$env:ARM_CONTAINER_NAME" `
#           -backend-config="key=terraform.tfstate" `
#           -backend-config="access_key=$env:ARM_ACCESS_KEY"
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Terraform Init'
#       env:
#         ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
#         ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
#         ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
#         ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

#     - powershell: |
#         terraform plan -out=tfplan
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Terraform Plan'
#       env:
#         ARM_CLIENT_ID: $(ARM_AZURE_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_AZURE_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_AZURE_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_AZURE_TENANT_ID)

#         TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
#         TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
#         TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
#         TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
#         TF_VAR_admin_password: $(ARM_VM_PASSWORD)
#         TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
#         TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
#         TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
#         TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)

#     - publish: $(TF_ROOT)/tfplan
#       artifact: tfplan
#       displayName: 'Publish tfplan artifact'

# - stage: TerraformApply
#   displayName: 'Terraform Apply'
#   dependsOn: TerraformPlan
#   condition: succeeded()
#   jobs:
#   - job: Apply
#     displayName: 'Run Terraform Apply'
#     pool:
#       name: SelfHosted
#     steps:
#     - checkout: self

#     - download: current
#       artifact: tfplan
#       displayName: 'Download tfplan artifact'

#     - powershell: |
#         Get-ChildItem -Recurse $env:PIPELINE_WORKSPACE
#       displayName: 'Show downloaded artifact files'

#     - powershell: |
#         terraform init `
#           -backend-config="resource_group_name=$env:ARM_RESOURCE_GROUP_NAME" `
#           -backend-config="storage_account_name=$env:ARM_STORAGE_ACCOUNT_NAME" `
#           -backend-config="container_name=$env:ARM_CONTAINER_NAME" `
#           -backend-config="key=terraform.tfstate" `
#           -backend-config="access_key=$env:ARM_ACCESS_KEY"
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Terraform Init (Apply)'
#       env:
#         ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
#         ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
#         ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
#         ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

#     - powershell: |
#         terraform apply -auto-approve "$env:PIPELINE_WORKSPACE\tfplan\tfplan"
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Terraform Apply'
#       env:
#         PIPELINE_WORKSPACE: $(Pipeline.Workspace)

#         ARM_CLIENT_ID: $(ARM_AZURE_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_AZURE_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_AZURE_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_AZURE_TENANT_ID)

#         TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
#         TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
#         TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
#         TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
#         TF_VAR_admin_password: $(ARM_VM_PASSWORD)
#         TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
#         TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
#         TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
#         TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)

#     - powershell: |
#         Write-Host "Export de la clé SSH privée générée par Terraform..."

#         $privateKey = terraform output -raw ssh_private_key

#         $keyPath = "$(System.DefaultWorkingDirectory)\id_rsa"
#         $privateKey | Out-File -Encoding ascii -FilePath $keyPath -Force

#         Write-Host "Clé SSH écrite dans : $keyPath"
#         Write-Host "Pas de permissions modifiées (icacls désactivé)"
#       workingDirectory: $(TF_ROOT)
#       displayName: 'Export SSH Private Key (sans icacls)'

trigger:
- devops

pool:
  name: SelfHosted

variables:
- group: LaPauseClope
- name: TF_ROOT
  value: 'terraform'
- name: ANSIBLE_PIPELINE_ID
  value: '13'

stages:
- stage: TerraformPlan
  displayName: 'Terraform Plan'
  jobs:
  - job: Plan
    displayName: 'Run Terraform Plan'
    steps:
    - checkout: self

    - powershell: terraform -version
      displayName: 'Check Terraform Version'

    - powershell: |
        terraform init -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" `
                      -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" `
                      -backend-config="container_name=$(ARM_CONTAINER_NAME)" `
                      -backend-config="key=terraform.tfstate" `
                      -backend-config="access_key=$(ARM_ACCESS_KEY)"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init'

    - powershell: |
        terraform plan -out=tfplan
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Plan'
      env:
        TF_VAR_admin_password: $(ARM_VM_PASSWORD)
        TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
        TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
        TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
        TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
        TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
        TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
        TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)

    - publish: $(TF_ROOT)/tfplan
      artifact: tfplan

- stage: TerraformApply
  displayName: 'Terraform Apply'
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
  - job: Apply
    displayName: 'Run Terraform Apply'
    steps:
    - checkout: self

    - download: current
      artifact: tfplan

    - powershell: |
        terraform init -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" `
                      -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" `
                      -backend-config="container_name=$(ARM_CONTAINER_NAME)" `
                      -backend-config="key=terraform.tfstate" `
                      -backend-config="access_key=$(ARM_ACCESS_KEY)"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init (Apply)'

    - powershell: terraform apply -auto-approve "$env:PIPELINE_WORKSPACE\tfplan\tfplan"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Apply'
      env:
        TF_VAR_admin_password: $(ARM_VM_PASSWORD)
        TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
        TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
        TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
        TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
        TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
        TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
        TF_VAR_tenant_id: $(ARM_TENANT_ID)


    - powershell: |
        terraform output -raw vm_public_ip > ip.txt
        terraform output -raw ssh_private_key > ssh_private_key.txt
      workingDirectory: $(TF_ROOT)
      displayName: 'Extract Terraform Outputs'

    - publish: $(TF_ROOT)/ip.txt
      artifact: terraform-output

    - publish: $(TF_ROOT)/ssh_private_key.txt
      artifact: terraform-ssh-key

- stage: ConfigureWithAnsible
  displayName: 'Configure with Ansible'
  dependsOn: TerraformApply
  condition: succeeded()
  jobs:
  - job: AnsibleConfigure
    displayName: 'Run Ansible Playbook'
    steps:
    - checkout: self

    - download: current
      artifact: terraform-output

    - download: current
      artifact: terraform-ssh-key

    - powershell: |
        # === Charger IP et clé
        $ip = Get-Content -Path "$(Pipeline.Workspace)\terraform-output\ip.txt"
        $sshKeyRaw = Get-Content -Path "$(Pipeline.Workspace)\terraform-ssh-key\ssh_private_key.txt" -Raw
        $localKeyPath = "$env:USERPROFILE\ansible_ssh_key"

        # === Écriture en ASCII pur
        [System.IO.File]::WriteAllText($localKeyPath, $sshKeyRaw, [System.Text.Encoding]::ASCII)

        # === WSL : copie dans un dossier Linux
        $wslDestDir = "/root/ansible"
        $wslKeyPath = "$wslDestDir/ansible_ssh_key"

        wsl bash -c "mkdir -p $wslDestDir && cp /mnt/c/Users/fabio/ansible_ssh_key $wslKeyPath && chmod 600 $wslKeyPath"

        # === Générer inventory dynamique
        $inventoryContent = "server ansible_host=$ip ansible_user=adminuser ansible_ssh_private_key_file=$wslKeyPath"
        $inventoryPath = "$(System.DefaultWorkingDirectory)\ansible_inventory"
        Set-Content -Path $inventoryPath -Value $inventoryContent -Encoding ascii

        $wslInventory = "/mnt/c" + $inventoryPath.Substring(2).Replace('\', '/')
        $wslPlaybook = "/mnt/c" + "$(System.DefaultWorkingDirectory)\deploy.yml".Substring(2).Replace('\', '/')

        # === Test SSH
        Write-Host "Testing SSH to $ip with $wslKeyPath..."
        $sshCmd = "ssh -vvv -i '$wslKeyPath' -o StrictHostKeyChecking=no adminuser@$ip 'echo OK'"
        $sshOutput = wsl bash -c "$sshCmd" 2>&1

        Write-Host "=== SSH DEBUG OUTPUT ==="
        $sshOutput | ForEach-Object { Write-Host $_ }
        Write-Host "=== END SSH DEBUG OUTPUT ==="

        # === Run Ansible Playbook
        wsl bash -c "ansible-playbook -i '$wslInventory' '$wslPlaybook' --private-key '$wslKeyPath' -u adminuser -vvv"
      displayName: 'Prepare SSH Key, Test, and Run Ansible'
      env:
        ANSIBLE_HOST_KEY_CHECKING: False
