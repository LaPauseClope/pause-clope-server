trigger:
- devops

pool:
  name: SelfHosted

variables:
- group: LaPauseClope
- name: TF_ROOT
  value: 'terraform'
- name: ANSIBLE_PIPELINE_ID
  value: '13'
- name: VM_NAME
  value: 'lapauseclope-machine'
- name: RESOURCE_GROUP_NAME
  value: '$(ARM_RESOURCE_GROUP_NAME)'
- name: RECOVERY_VAULT_NAME
  value: 'PauseClopeVault'

stages:
- stage: TerraformPlan
  displayName: 'Terraform Plan'
  jobs:
  - job: Plan
    displayName: 'Run Terraform Plan'
    steps:
    - checkout: self
    - powershell: terraform -version
      displayName: 'Check Terraform Version'
    - powershell: |
        terraform init -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" `
                      -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" `
                      -backend-config="container_name=$(ARM_CONTAINER_NAME)" `
                      -backend-config="key=terraform.tfstate" `
                      -backend-config="access_key=$(ARM_ACCESS_KEY)"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init'
    - powershell: |
        terraform plan -out=tfplan
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Plan'
      env:
        TF_VAR_admin_password: $(ARM_VM_PASSWORD)
        TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
        TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
        TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
        TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
        TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
        TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
        TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)
    - publish: $(TF_ROOT)/tfplan
      artifact: tfplan

- stage: TerraformApply
  displayName: 'Terraform Apply'
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
  - job: Apply
    displayName: 'Run Terraform Apply'
    steps:
    - checkout: self
    - download: current
      artifact: tfplan
    - powershell: |
        terraform init -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" `
                      -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" `
                      -backend-config="container_name=$(ARM_CONTAINER_NAME)" `
                      -backend-config="key=terraform.tfstate" `
                      -backend-config="access_key=$(ARM_ACCESS_KEY)"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Init (Apply)'
    - powershell: |
        Write-Host "Resource Group: $(RESOURCE_GROUP_NAME)"
        Write-Host "Vault Name: $(RECOVERY_VAULT_NAME)"
        Write-Host "VM Name: $(VM_NAME)"
        az login --service-principal -u $(ARM_AZURE_CLIENT_ID) -p $(ARM_AZURE_CLIENT_SECRET) --tenant $(ARM_AZURE_TENANT_ID)
        $retainUntil = (Get-Date).AddDays(7).ToString("dd-MM-yyyy")
        Write-Host "Retention Date: $retainUntil"
        az backup protection backup-now `
          --resource-group $(RESOURCE_GROUP_NAME) `
          --vault-name $(RECOVERY_VAULT_NAME) `
          --item-name $(VM_NAME) `
          --container-name $(VM_NAME) `
          --backup-management-type AzureIaasVM `
          --backup-type Full `
          --retain-until $retainUntil
      displayName: 'Create VM Backup'
      env:
        ARM_AZURE_CLIENT_ID: $(ARM_AZURE_CLIENT_ID)
        ARM_AZURE_CLIENT_SECRET: $(ARM_AZURE_CLIENT_SECRET)
        ARM_AZURE_TENANT_ID: $(ARM_AZURE_TENANT_ID)
    - powershell: terraform apply -auto-approve "$env:PIPELINE_WORKSPACE\tfplan\tfplan"
      workingDirectory: $(TF_ROOT)
      displayName: 'Terraform Apply'
      env:
        TF_VAR_admin_password: $(ARM_VM_PASSWORD)
        TF_VAR_backend_rg_name: $(ARM_RESOURCE_GROUP_NAME)
        TF_VAR_backend_account_name: $(ARM_STORAGE_ACCOUNT_NAME)
        TF_VAR_backend_container_name: $(ARM_CONTAINER_NAME)
        TF_VAR_backend_access_key: $(ARM_ACCESS_KEY)
        TF_VAR_subscription_id: $(ARM_AZURE_SUBSCRIPTION_ID)
        TF_VAR_client_id: $(ARM_AZURE_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_AZURE_CLIENT_SECRET)
        TF_VAR_tenant_id: $(ARM_AZURE_TENANT_ID)
    - powershell: |
        terraform output -raw vm_public_ip > ip.txt
        terraform output -raw ssh_private_key > ssh_private_key.txt
      workingDirectory: $(TF_ROOT)
      displayName: 'Extract Terraform Outputs'
    - publish: $(TF_ROOT)/ip.txt
      artifact: terraform-output
    - publish: $(TF_ROOT)/ssh_private_key.txt
      artifact: terraform-ssh-key

- stage: ConfigureWithAnsible
  displayName: 'Configure with Ansible'
  dependsOn: TerraformApply
  condition: succeeded()
  jobs:
  - job: AnsibleConfigure
    displayName: 'Run Ansible Playbook'
    steps:
    - checkout: self
    - download: current
      artifact: terraform-output
    - download: current
      artifact: terraform-ssh-key
    - powershell: |
        Write-Host "Début de la tâche Prepare SSH Key and Run Ansible"
        $ip = Get-Content -Path "$(Pipeline.Workspace)\terraform-output\ip.txt"
        Write-Host "Adresse IP de la VM : $ip"
        $sshKeyRaw = Get-Content -Path "$(Pipeline.Workspace)\terraform-ssh-key\ssh_private_key.txt" -Raw
        Write-Host "Clé SSH récupérée"
        $localKeyPath = "$env:USERPROFILE\ansible_ssh_key"
        Write-Host "Écriture de la clé SSH à : $localKeyPath"
        [System.IO.File]::WriteAllText($localKeyPath, $sshKeyRaw, [System.Text.Encoding]::ASCII)
        Write-Host "Clé SSH écrite avec succès"
        $wslKeyPath = "/root/ansible/ansible_ssh_key"
        $wslInventoryPath = "/root/ansible/inventory"
        Write-Host "Création du répertoire /root/ansible dans WSL"
        wsl bash -c "mkdir -p /root/ansible"
        Write-Host "Copie de la clé SSH vers WSL : $wslKeyPath"
        wsl bash -c "cp /mnt/c/Users/fabio/ansible_ssh_key $wslKeyPath"
        Write-Host "Changement des permissions de la clé SSH"
        wsl bash -c "chmod 600 $wslKeyPath"
        $inventoryContent = "[all]`nserver ansible_host=$ip ansible_user=adminuser ansible_ssh_private_key_file=$wslKeyPath ansible_python_interpreter=/usr/bin/python3"
        Write-Host "Contenu de l'inventaire Ansible : $inventoryContent"
        Set-Content -Path "$(System.DefaultWorkingDirectory)\ansible_inventory" -Value $inventoryContent -Encoding ascii
        Write-Host "Inventaire écrit dans : $(System.DefaultWorkingDirectory)\ansible_inventory"
        $windowsInventory = "$(System.DefaultWorkingDirectory)\ansible_inventory"
        $inventoryWSL = "/mnt/c" + $windowsInventory.Substring(2).Replace('\', '/')
        Write-Host "Copie de l'inventaire vers WSL : $inventoryWSL"
        wsl bash -c "cp '$inventoryWSL' '$wslInventoryPath'"
        Write-Host "=== INVENTORY CONTENT ==="
        wsl bash -c "cat /root/ansible/inventory"
        Write-Host "========================="
        Write-Host "Test de connexion Ansible avec ping..."
        $pingResult = wsl bash -c "ansible all -i /root/ansible/inventory -m ping -u adminuser --private-key $wslKeyPath"
        Write-Host "Résultat du ping Ansible : $pingResult"
        Write-Host "=== EXÉCUTION DU PLAYBOOK ==="
        $windowsPlaybookPath = "$(Build.SourcesDirectory)\deploy.yml"
        Write-Host "Chemin du playbook Windows : $windowsPlaybookPath"
        $playbookPath = "/mnt/c" + $windowsPlaybookPath.Substring(2).Replace('\', '/')
        Write-Host "Chemin du playbook WSL : $playbookPath"
        $cmd = "ansible-playbook -i $wslInventoryPath $playbookPath --private-key $wslKeyPath -u adminuser"
        Write-Host "Commande Ansible : $cmd"
        $playbookResult = wsl bash -c "$cmd"
        Write-Host "Résultat du playbook : $playbookResult"
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Échec du playbook Ansible avec le code de sortie $LASTEXITCODE"
            exit $LASTEXITCODE
        }
      displayName: 'Prepare SSH Key and Run Ansible'
      env:
        ANSIBLE_HOST_KEY_CHECKING: False

- stage: Rollback
  displayName: 'Rollback on Failure'
  dependsOn: [TerraformApply, ConfigureWithAnsible]
  condition: failed()
  jobs:
  - job: RollbackVM
    displayName: 'Restore VM from Backup'
    steps:
    - checkout: self
    - powershell: |
        az login --service-principal -u $(ARM_AZURE_CLIENT_ID) -p $(ARM_AZURE_CLIENT_SECRET) --tenant $(ARM_AZURE_TENANT_ID)
        # Get the latest recovery point
        $recoveryPoint = az backup recoverypoint list `
          --resource-group $(RESOURCE_GROUP_NAME) `
          --vault-name $(RECOVERY_VAULT_NAME) `
          --backup-management-type AzureIaasVM `
          --container-name $(VM_NAME) `
          --item-name $(VM_NAME) `
          --query "[0].name" `
          --output tsv
        if (-not $recoveryPoint) {
            Write-Error "No recovery point found for VM $(VM_NAME)"
            exit 1
        }
        # Trigger VM restore
        az backup restore restore-disks `
          --resource-group $(RESOURCE_GROUP_NAME) `
          --vault-name $(RECOVERY_VAULT_NAME) `
          --container-name $(VM_NAME) `
          --item-name $(VM_NAME) `
          --rp-name $recoveryPoint `
          --storage-account $(ARM_STORAGE_ACCOUNT_NAME) `
          --restore-mode OriginalLocation
        Write-Host "VM $(VM_NAME) restore initiated from recovery point $recoveryPoint"
      displayName: 'Restore VM from Azure Backup'
      env:
        ARM_AZURE_CLIENT_ID: $(ARM_AZURE_CLIENT_ID)
        ARM_AZURE_CLIENT_SECRET: $(ARM_AZURE_CLIENT_SECRET)
        ARM_AZURE_TENANT_ID: $(ARM_AZURE_TENANT_ID)
        ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)