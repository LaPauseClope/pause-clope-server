variables:
  - group: LaPauseClope

trigger:
  paths:
    include:
      - azure-pipeline.yaml
      - terraform/**

pool:
  vmImage: 'ubuntu-latest'


stages:
  - stage: TerraformPlanAKS
    displayName: 'Terraform Plan for AKS'
    jobs:
      - job: TerraformPlanJobAKS
        displayName: 'Generate Terraform Plan for AKS'
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: Terraks
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                cd infra/terraform/aks
                terraform init -upgrade \
                  -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(ARM_CONTAINER_NAME)" \
                  -backend-config="access_key=$(ARM_ACCESS_KEY)"
                terraform plan -out=terraform.tfplan \
                  -var="backend_container_name=$(ARM_CONTAINER_NAME)" \
                  -var="backend_rg_name=$(ARM_RESOURCE_GROUP_NAME)" \
                  -var="backend_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" \
                  -var="backend_access_key=$(ARM_ACCESS_KEY)" \
            displayName: 'Generate Terraform Plan for AKS'
            env:
              ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
              ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
              ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
              ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: infra/terraform/aks/terraform.tfplan
              ArtifactName: '$(Build.BuildId)-tfplan-aks'
              publishLocation: 'Container'
            displayName: 'Publish Plan Artifact for AKS'

  - stage: TerraformApplyAKS
    displayName: 'Terraform Apply for AKS'
    dependsOn: TerraformPlanAKS
    jobs:
      - job: TerraformApplyJobAKS
        displayName: 'Apply Terraform Plan for AKS'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(Build.BuildId)-tfplan-aks'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Plan Artifact for AKS'
          - task: AzureCLI@2
            inputs:
              azureSubscription: Terraks
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                cd infra/terraform/aks
                terraform init -upgrade \
                  -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(ARM_CONTAINER_NAME)" \
                  -backend-config="access_key=$(ARM_ACCESS_KEY)"
                terraform apply -auto-approve -lock=false -input=false $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-tfplan-aks/terraform.tfplan
            displayName: 'Apply Terraform Plan for AKS'
            env:
              ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
              ARM_CONTAINER_NAME: $(ARM_CONTAINER_NAME)
              ARM_RESOURCE_GROUP_NAME: $(ARM_RESOURCE_GROUP_NAME)
              ARM_STORAGE_ACCOUNT_NAME: $(ARM_STORAGE_ACCOUNT_NAME)
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                cd infra/terraform/aks
                terraform init -upgrade \
                  -backend-config="resource_group_name=$(ARM_RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(ARM_STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(ARM_CONTAINER_NAME)" \
                  -backend-config="access_key=$(ARM_ACCESS_KEY)"
                mkdir -p $(Build.ArtifactStagingDirectory)/ssh-keys
                terraform output -json > $(Build.ArtifactStagingDirectory)/ssh-keys/terraform-outputs.json
                cat $(Build.ArtifactStagingDirectory)/ssh-keys/terraform-outputs.json
            displayName: 'Capture Terraform Outputs'